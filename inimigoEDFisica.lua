-- This file is for use with Corona(R) SDK
--
-- This file is automatically generated with PhysicsEdtior (http://physicseditor.de). Do not edit
--
-- Usage example:
--			local scaleFactor = 1.0
--			local physicsData = (require "shapedefs").physicsData(scaleFactor)
--			local shape = display.newImage("objectname.png")
--			physics.addBody( shape, physicsData:get("objectname") )
--

-- copy needed functions to local scope
local unpack = unpack
local pairs = pairs
local ipairs = ipairs

local M = {}

function M.physicsData(scale)
	local physics = { data =
	{ 
		
		["sprite_ED"] = {
                    {
                    pe_fixture_id = "personagem", density = 2, friction = 0, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   30, -15  ,  20, -5  ,  10, 0  ,  25, -25  ,  30, -25  }
                    }
                     ,
                    {
                    pe_fixture_id = "personagem", density = 2, friction = 0, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -15, 50  ,  10, 55  ,  20, 60  ,  25, 70  ,  -10, 70  }
                    }
                     ,
                    {
                    pe_fixture_id = "personagem", density = 2, friction = 0, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   30, 30  ,  25, 35  ,  15, 5  ,  30, 20  }
                    }
                     ,
                    {
                    pe_fixture_id = "personagem", density = 2, friction = 0, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   25, 70  ,  20, 60  ,  25, 65  }
                    }
                     ,
                    {
                    pe_fixture_id = "personagem", density = 2, friction = 0, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -20, -5  ,  10, 55  ,  -15, 50  }
                    }
                     ,
                    {
                    pe_fixture_id = "personagem", density = 2, friction = 0, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   20, 45  ,  15, 50  ,  10, 0  ,  15, 5  ,  25, 35  }
                    }
                     ,
                    {
                    pe_fixture_id = "personagem", density = 2, friction = 0, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   35, -45  ,  25, -25  ,  10, 0  ,  -30, -70  ,  30, -70  ,  35, -60  }
                    }
                     ,
                    {
                    pe_fixture_id = "personagem", density = 2, friction = 0, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -35, -65  ,  -20, -5  ,  -30, -10  ,  -40, -20  ,  -45, -30  ,  -45, -55  }
                    }
                     ,
                    {
                    pe_fixture_id = "personagem", density = 2, friction = 0, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -35, -65  ,  -30, -70  ,  10, 0  ,  15, 50  ,  10, 55  ,  -20, -5  }
                    }         
		}
		
	} }

        -- apply scale factor
        local s = scale or 1.0
        for bi,body in pairs(physics.data) do
                for fi,fixture in ipairs(body) do
                    if(fixture.shape) then
                        for ci,coordinate in ipairs(fixture.shape) do
                            fixture.shape[ci] = s * coordinate
                        end
                    else
                        fixture.radius = s * fixture.radius
                    end
                end
        end
	
	function physics:get(name)
		return unpack(self.data[name])
	end

	function physics:getFixtureId(name, index)
                return self.data[name][index].pe_fixture_id
	end
	
	return physics;
end

return M

